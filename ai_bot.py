# -*- coding: utf-8 -*-
import pandas as pd
import pickle
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch


# ================== C·∫§U H√åNH H·ªÜ TH·ªêNG ==================
app = FastAPI()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ================== PH·∫¶N 1: LOAD MODEL NG√îN NG·ªÆ ==================
class QAModel:
    def __init__(self):
        self.tokenizer = AutoTokenizer.from_pretrained("vinai/bartpho-qa")
        self.model = AutoModelForSeq2SeqLM.from_pretrained("vinai/bartpho-qa").to(device)
        self.product_db = self._load_product_db()
    
    def _load_product_db(self):
        """T·∫£i c∆° s·ªü d·ªØ li·ªáu s·∫£n ph·∫©m (c√≥ th·ªÉ thay b·∫±ng k·∫øt n·ªëi database th·ª±c)"""
        return {
            "laptop": {
                "Dell XPS 13": {"price": "25.990.000ƒë", "specs": "Core i7, 16GB RAM, SSD 512GB"},
                "MacBook Air M1": {"price": "23.500.000ƒë", "specs": "Apple M1, 8GB RAM, 256GB SSD"}
            },
            "pc": {
                "Asus ROG Strix": {"price": "35.000.000ƒë", "specs": "RTX 3080, 32GB RAM"}
            }
        }
    
    def generate_answer(self, question: str, context: str = None) -> str:
        """Sinh c√¢u tr·∫£ l·ªùi d·ª±a tr√™n c√¢u h·ªèi v√† ng·ªØ c·∫£nh"""
        if not context:
            context = self._retrieve_context(question)
        
        inputs = self.tokenizer(question, context, return_tensors="pt", truncation=True).to(device)
        outputs = self.model.generate(**inputs, max_length=150)
        return self.tokenizer.decode(outputs[0], skip_special_tokens=True)
    
    def _retrieve_context(self, question: str) -> str:
        """Truy xu·∫•t th√¥ng tin s·∫£n ph·∫©m li√™n quan"""
        product_type = self._detect_product_type(question)
        product_name = self._detect_product_name(question)
        
        if product_type and product_name in self.product_db.get(product_type, {}):
            product_info = self.product_db[product_type][product_name]
            return f"""
            Th√¥ng tin s·∫£n ph·∫©m {product_name}:
            - Gi√° b√°n: {product_info['price']}
            - C·∫•u h√¨nh: {product_info['specs']}
            - B·∫£o h√†nh: 24 th√°ng
            """
        return "S·∫£n ph·∫©m m√°y t√≠nh v·ªõi nhi·ªÅu l·ª±a ch·ªçn t·ª´ c√°c h√£ng Dell, Asus, Apple..."

    def _detect_product_type(self, text: str) -> str:
        """Nh·∫≠n di·ªán lo·∫°i s·∫£n ph·∫©m"""
        text = text.lower()
        if "laptop" in text: return "laptop"
        if "pc" in text or "m√°y b√†n" in text: return "pc"
        return None

    def _detect_product_name(self, text: str) -> str:
        """Nh·∫≠n di·ªán t√™n s·∫£n ph·∫©m c·ª• th·ªÉ"""
        text = text.lower()
        for product_type in self.product_db.values():
            for name in product_type.keys():
                if name.lower() in text:
                    return name
        return None

# Kh·ªüi t·∫°o h·ªá th·ªëng AI
try:
    qa_system = QAModel()
    print("ƒê√£ t·∫£i xong model QA!")
except Exception as e:
    print(f"L·ªói khi t·∫£i model: {str(e)}")
    qa_system = None

# ================== PH·∫¶N 2: API TH√îNG MINH ==================
class QuestionRequest(BaseModel):
    question: str
    conversation_history: list = []

@app.post("/ask")
async def ask_ai(request: QuestionRequest):
    if not qa_system:
        raise HTTPException(status_code=500, detail="H·ªá th·ªëng AI ch∆∞a s·∫µn s√†ng")
    
    # X√¢y d·ª±ng ng·ªØ c·∫£nh t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
    context = "\n".join(request.conversation_history[-3:])  # L·∫•y 3 tin nh·∫Øn g·∫ßn nh·∫•t
    
    # T·∫°o c√¢u tr·∫£ l·ªùi
    answer = qa_system.generate_answer(
        question=request.question,
        context=context if context else None
    )
    
    return {
        "answer": answer,
        "suggestions": [
            "B·∫°n c·∫ßn th√™m th√¥ng tin g√¨ v·ªÅ s·∫£n ph·∫©m n√†y?",
            "B·∫°n mu·ªën so s√°nh v·ªõi s·∫£n ph·∫©m kh√°c?"
        ]
    }

# ================== PH·∫¶N 3: CH·∫†Y ·ª®NG D·ª§NG ==================
if __name__ == "__main__":
    print("\nü§ñ H·ªÜ TH·ªêNG AI B√ÅN H√ÄNG TH√îNG MINH ƒê√É S·∫¥N S√ÄNG")
    print("C√°c t√≠nh nƒÉng ch√≠nh:")
    print("- Hi·ªÉu v√† tr·∫£ l·ªùi c√¢u h·ªèi t·ª± nhi√™n v·ªÅ s·∫£n ph·∫©m")
    print("- Duy tr√¨ ng·ªØ c·∫£nh h·ªôi tho·∫°i")
    print("- G·ª£i √Ω ti·∫øp theo th√¥ng minh")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)