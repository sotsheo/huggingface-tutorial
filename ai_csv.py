# -*- coding: utf-8 -*-
import pandas as pd
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch
import re

# ================== C·∫§U H√åNH H·ªÜ TH·ªêNG ==================
app = FastAPI()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ================== PH·∫¶N 1: ƒê·ªåC V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ==================
class ProductDatabase:
    def __init__(self, csv_path="public/laptop_sales_large.csv"):  # Th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        try:
            self.df = pd.read_csv(csv_path)
            self._preprocess_data()
            print("‚úÖ ƒê√£ t·∫£i xong d·ªØ li·ªáu s·∫£n ph·∫©m!")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {str(e)}")
            self.df = pd.DataFrame()

    def _preprocess_data(self):
        """Chu·∫©n h√≥a d·ªØ li·ªáu"""
        if not self.df.empty:
            self.df['Product'] = self.df['Product'].str.lower().fillna('')
            self.df['Brand'] = self.df['Brand'].str.lower().fillna('')
            self.df['Price'] = pd.to_numeric(self.df['Price'], errors='coerce').fillna(0)

    def get_product_info(self, product_name: str) -> dict:
        """L·∫•y th√¥ng tin s·∫£n ph·∫©m theo t√™n"""
        if self.df.empty:
            return None
            
        product_name = product_name.lower()
        matched = self.df[self.df['Product'].str.contains(product_name, case=False, na=False)]
        
        if not matched.empty:
            product = matched.iloc[0]
            return {
                "name": product['Product'],
                "brand": product['Brand'],
                "price": f"{product['Price']:,.0f} VNƒê",
                "quantity": product['Quantity'],
                "last_sale": product.get('Date', 'N/A')
            }
        return None

# ================== PH·∫¶N 2: H·ªÜ TH·ªêNG H·ªéI ƒê√ÅP ==================
class QASystem:
    def __init__(self, db):
        self.db = db
        try:
            self.tokenizer = AutoTokenizer.from_pretrained("vinai/bartpho-syllable")
            self.model = AutoModelForSeq2SeqLM.from_pretrained("vinai/bartpho-syllable").to(device)
            print("‚úÖ ƒê√£ t·∫£i xong m√¥ h√¨nh ng√¥n ng·ªØ!")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
            self.model = None

    def extract_info(self, question: str) -> dict:
        """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√¢u h·ªèi"""
        question = question.lower()
        print((p for p in self.db.df['Product'].unique() if p in question))
        return {
            "product": next((p for p in self.db.df['Product'].unique() if p in question), None),
            "brand": next((b for b in self.db.df['Brand'].unique() if b in question), None),
            "question_type": ("price" if "gi√°" in question else 
                            "specs" if "c·∫•u h√¨nh" in question else
                            "stock" if "c√≤n h√†ng" in question else
                            "general")
        }

    def generate_response(self, question: str) -> str:
        """T·∫°o c√¢u tr·∫£ l·ªùi"""
        if not self.model:
            return "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫£o tr√¨"
            
        info = self.extract_info(question)
        
        # L·∫•y th√¥ng tin t·ª´ database
        context = ""
        if info['product']:
            product_info = self.db.get_product_info(info['product'])
            if product_info:
                context = f"""
                S·∫£n ph·∫©m: {product_info['name']}
                H√£ng: {product_info['brand']}
                Gi√°: {product_info['price']}
                S·ªë l∆∞·ª£ng: {product_info['quantity']}
                """
        
        # T·∫°o c√¢u tr·∫£ l·ªùi
        inputs = self.tokenizer(question, context, return_tensors="pt", truncation=True).to(device)
        outputs = self.model.generate(**inputs, max_length=150)
        return self.tokenizer.decode(outputs[0], skip_special_tokens=True)

# ================== PH·∫¶N 3: API ==================
# Kh·ªüi t·∫°o h·ªá th·ªëng
try:
    db = ProductDatabase()  # S·ª≠a th√†nh ƒë∆∞·ªùng d·∫´n file CSV th·ª±c t·∫ø c·ªßa b·∫°n
    qa_system = QASystem(db)
except Exception as e:
    print(f"‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng: {str(e)}")
    qa_system = None

class QuestionRequest(BaseModel):
    question: str

@app.post("/ask")
async def ask_question(request: QuestionRequest):
    if not qa_system or not qa_system.model:
        raise HTTPException(status_code=500, detail="H·ªá th·ªëng ch∆∞a s·∫µn s√†ng")
    
    try:
        answer = qa_system.generate_response(request.question)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}")

# ================== PH·∫¶N 4: CH·∫†Y ·ª®NG D·ª§NG ==================
if __name__ == "__main__":
    print("\nü§ñ AI CHATBOT TH√îNG TIN S·∫¢N PH·∫®M")
    print("C√°c endpoint ch√≠nh:")
    print("- POST /ask - G·ª≠i c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m")
    print("\nAPI ƒëang ch·∫°y t·∫°i: http://localhost:8000")
    
    uvicorn.run(app, host="0.0.0.0", port=8000)